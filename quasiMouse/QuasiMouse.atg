/*
  Por Thais e David, com base nos códigos da aula de Compiladores do prof. Marco Cristo
	Compilador -- Tabela de Simbolos e Checagem Lexica, Sintatica e Semantica da linguagem QuasiMouse
*/

class NDesig {
	String nome;
	public NDesig(String n) {
		nome = n;
	}
	public String getNome() {
		return nome;
	}
}

COMPILER QuasiMouse

	private Tab ts;  /* tabela de simbolos */
	private Obj atual; // indica qual é a função atual
  private Code objCode; // tradutor

  private static final int // compare operators
            eq = 0,
            lt = 2,
            gt = 4;
	
	public void erro(String msg) {
		errors.SemErr(t.line, t.col, msg);
	}

  private boolean verificaTipo(String s) {
    return s != null && s.matches("[0-9]*");
  }

CHARACTERS
  letra = 'A'..'Z'.
  digito = '0'..'9'.
  caractere = "abcdefghijklmnopqrstuvwxyz_".
  linhaComChar = ANY - '\r' - '\n'.
  qualquerCharMenosAspas = linhaComChar - '\"'.

TOKENS
    ident = letra.
    numero = digito {digito}.
    string = '"' { qualquerCharMenosAspas | "\\\""} '"'.

    /* Símbolos reservados */
    
    dolarSign = "$". /* Denota tanto o fim de um programa quanto a definição de uma função */
    interrogacao = "?".
    aspas = '"'.
    ecomercial = "&".
    circunflexo = "^".
    exclamacao = "!".
    ponto = ".".
    doispontos = ":".
    cerquilha = "#".
    arroba = "@".
    abreColchete = "[".
    barraVertical = "|".
    fechaColchete = "]".
    abreParenteses = "(".
    fechaparenteses = ")".
    pontoEvirgula = ";".
    virgula = ",".

    /* Operadores */
    maior = ">".
    menor = "<".
    igual = "=".

PRAGMAS
	option = "$d".	(. ts.dump(); .)

COMMENTS FROM "~" TO '\n'

IGNORE
    '\n' + '\r' + '\t'

PRODUCTIONS

  QuasiMouse                   (. atual = null; // não há função sendo compilada
                                  ts = new Tab(this);
                                  ts.abrirEscopo("Escopo Global"); .)
  = Instrucao 
    { Instrucao }                (. objCode.setDataSize(ts.escopoAtual.nVars);
    dolarSign                       ts.fecharEscopo(); .)
  .
  Instrucao            
    = DeclaracaoFuncao 
    | ChamadaFuncao 
      | Condicional 
    | Laco 
    | Assinalamento  
    | Imprime 
    | Leitura
    .

  DeclaracaoFuncao                          (. String s = ""; NDesig id; .)
  = dolarSign DesigIdent<out id>            (. atual = ts.inserir(Obj.Func, id.getNome());
                                               ts.abrirEscopo("Funcao " + id.getNome()); .)   
    {  
    ","
     DesigIdent<out id>                     (. ts.inserir(Obj.Var, id.getNome()); atual.nPars++;.)
    }
    pontoEvirgula
    Bloco                                   (. atual.locais = ts.escopoAtual.locais; // Bloco com as instruções da func
                                               ts.fecharEscopo(); .)
  .        

  Bloco 
  = { Instrucao }  
    arroba     
  .                               

  ChamadaProcedimento
  = cerquilha 
  Designador <out op>  
  ";"                    (. objCode.put(objCode.pop);.) // sem parametros
  Parametros <op>       (. objCode.put(objCode.call); 
                            objCode.put2(op.end);.)                        
                                            
 .

/*
Casos:
1. N. 1 + N:         ~ incremente N por 1
2. X. Y:             ~ copie o valor de X para Y
3. F. V. - H. - F:   ~ fuel = fuel - v - h
4. A. 0 <            ~ if altitude < 0
//A. A. B. / B. * -
*/

  Assinalamento                    (. Obj o; NDesig id; opr; int end;.)
  = Exp <out Operand op1>                       
      [  DesigIdent<out id>         (. o = ts.buscar(id.getNome());  
                                       Operand op = new Operand(o);
                                       objCode.assign(op, op1);     .) 
                                      // Code.load(op); .)
        ":"
      ] 
    [
    Exp <out Operand op2>           (. objCode.load(op1); objCode.load(op2);  .)  
    OpRel <out opr>   
    abreColchete                     
    Instrucao                       (. end = objCode.putJump(opr, 0); .) // if
    [ barraVertical                   
                                     (. int end2 = objCode.putJump(0);
                                        objCode.fixup(end); .) // else
      Instrucao                     (.  objCode.fixup(end2); .)
                                    (.  objCode.fixup(end); .)    
      ] 
    fechaColchete                 
    ]
  .

  Condicional                       (. int end;  .)
  = ident ponto (
    { Exp<out Operand op> }         (.objCode.load(op);.)
    | numero) OpRel<out int opr>
  abreColchete 
  Instrucao                         (. end = objCode.putJump(opr, 0); .) // if
    [ barraVertical                   
                                    (. int end2 = objCode.putJump(0);
                                        objCode.fixup(end); .) // else
      Instrucao                     (.  objCode.fixup(end2); .)
                                    (.  objCode.fixup(end); .)    
      ] 
    fechaColchete                 
    ]
  .



  OpRel<out int opr>          (. opr = -1; .)
    =  igual                  (. opr = eq; .)
      | maior                 (. opr = gt; .)
      | menor                 (. opr = lt; .)
	.
 
  Exp <out Operand op>          		(. Operand op2; op=null; int opr; .) //retorna o valor da expressão entre dois ops
  = 
  Termo  <out op>                   
  [Termo  <out op>]                //   (. if (verificaTipo(Integer.toString(op)) == false) {
                                     //  erro("deve ser inteiro"); }.)
  [("-"                               (. opr = objCode.sub; .)
  | "+" )]                            (. opr = objCode.add; .)
  {                                   (. objCode.load(op);  objCode.put(opr);.)
      Termo  <out op2>             //   (. if (verificaTipo(Integer.toString(op2)) == false) {
      [Termo  <out op2>]             //     erro("deve ser inteiro"); }.)
      ("-"                            (. opr = objCode.sub; .)
      | "+")                          (. opr = objCode.add; .)
  }                                   (. objCode.load(op); objCode.put(opr); .)
  .

  Termo <out Operand op>	   	(. Operand op2; op = null; int opr; .)
  = Fator <out op>
    {
      (
         "*"                   (. opr = objCode.mul; .)
         |  "/"                (. opr = objCode.div; .)
      )                        (. objCode.load(op);  .)
      Fator<out op2>           (. objCode.load(op); objCode.put(opr); .)
    }
   .
  
  Fator <out Operand  op>     (. op = null; NDesig id;  .)
  =   numero                  (. op = new Operand(Integer.parseInt(t.val)); Code.load(op); .)
    | DesigIdent <out id>     (. Obj o = ts.buscar(id.getNome()); op = new Operand(o); Code.load(op); .)   
    //| "#" [Parametros<op>]    
  .
  
  Designador<out Operand op>      (.op=null; NDesig id; .)
  = ident                         
                                  (. Obj o = ts.buscar(t.val);
                                     op = new Operand(o); .) // retorna o valor da variavel
    "."
    
  .
  
  DesigIdent<out NDesig n>         
    = ident                        (. String nome = t.val; .)
                                   (. n = new NDesig(nome); .)
	.   

  Laco 
  = abreParenteses                (. int topo = objCode.getPC();.)
  Exp 
  ( circunflexo Instrucao |
    Instrucao circunflexo).

  Imprime    
  = string 
    [ ecomercial ] 
    | 
      (
        Exp<out Operand op> 
      | cerquilha Exp<out Operand op> 
      ) 
    exclamacao 
    [ecomercial] 
    | ecomercial
  .

  Leitura 
    = interrogacao 
    | interrogacao ident doispontos
  .



END QuasiMouse.
